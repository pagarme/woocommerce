version: 2.1

_run:
  pull_sonar_image: &pull_sonar_image
    name: Pull Docker sonar-scanner image
    command: |
      echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin
      docker pull pagarme/sonar-scanner
  pull_sonar_check_quality_gate_image: &pull_sonar_check_quality_gate_image
    name: Pull Docker check-sonar-quality-gate image
    command: |
      echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin
      docker pull pagarme/check-sonar-quality-gate

parameters:
  machine_image:
    type: string
    default: ubuntu-2004:202010-01
  working_dir:
    type: string
    default: '~/woocommerce'

jobs:
    build:
        working_directory: /app
        docker:
            - image: php:7.2-apache
              environment:
                  APP_ENV: test
        steps:
            - checkout
            - run:
                  name: Install system packages
                  command: apt-get update && apt-get -y install zip git zlib1g-dev wget
            - run:
                  name: Install PHP extensions
                  command: |
                      docker-php-ext-install pdo
                      docker-php-ext-install zip
            - run:
                  name: Install Composer
                  command: |
                      php -r "copy('http://getcomposer.org/installer', 'composer-setup.php');"
                      php composer-setup.php --version=1.10.13
            - run:
                  name: Display PHP information
                  command: |
                      php -v
                      php composer.phar --version
            - run:
                  name: Check PHP sintax
                  command: find . -name \*.php -exec php -l "{}" \;
            - run:
                  name: Install project dependencies
                  command: |
                      cd /app
                      php composer.phar install
            - store_artifacts:
                  path: /app
                  destination: app-artifact
            - persist_to_workspace:
                  root: /
                  paths:
                      - app

        working_directory: << pipeline.parameters.working_dir >>
        machine:
            image: << pipeline.parameters.machine_image >>
        steps:
            - attach_workspace:
                at: << pipeline.parameters.working_dir >>
            - run: *pull_sonar_check_quality_gate_image
            - run:
                name: Check quality gate
                command: make sonar-check-quality-gate

    publish:
        working_directory: /
        docker:
            - image: docker:17.05.0-ce-git
        steps:
            - setup_remote_docker
            - attach_workspace:
                  at: /
            - run:
                  name: Copy CI files to root
                  command: |
                      cd /app
                      cp .circleci/data/.htaccess .
                      cp .circleci/data/Dockerfile .
                      cp .circleci/data/update-wp-config.php .
                      cp .circleci/data/wait-for-mysql.sh .
            - run:
                  name: Build image base for modifications
                  command: |
                      cd /app && ls
                      docker build -t ${DOCKER_ACCOUNT}/${PROJECT_NAME}:latest .
                      docker run --name newimage -d -p3306:3306 -p80:80 ${DOCKER_ACCOUNT}/${PROJECT_NAME}:latest
            - run:
                  name: Wait for MySQL Service
                  command: |
                      docker exec -it newimage sh /app/wp-content/plugins/${PLUGIN_NAME}/wait-for-mysql.sh
                      docker exec -it newimage rm /app/wp-content/plugins/${PLUGIN_NAME}/wait-for-mysql.sh
            - run:
                  name: Activate and setup Plugin
                  command: |
                      docker exec -it newimage wp plugin activate ${PLUGIN_NAME} --allow-root
                      docker exec -it newimage chmod -R 777 /app/wp-content/plugins/${PLUGIN_NAME}
                      docker exec -it newimage mysql -u root -D wordpress -e "REPLACE INTO wp_options (option_name,option_value) VALUES ('${PLUGIN_META_NAME}','${PLUGIN_CONFIG}');"
                      docker exec -i newimage curl -X GET "http://localhost/wp-content/plugins/${PLUGIN_NAME}/update-wp-config.php?url=${STAGING_URL}"
                      docker exec -it newimage rm /app/wp-content/plugins/${PLUGIN_NAME}/update-wp-config.php
                      docker exec -it newimage touch test5.txt
            - run:
                  name: Clear useless files
                  command: |
                      docker exec -it newimage sh -c "cd /app/wp-content/plugins/${PLUGIN_NAME}" && \
                             rm -rf .github .circleci .plugin-data .git .gitignore .editorconfig && \
                             rm -rf Dockerfile update-wp-config.php wait-for-mysql.sh LICENSE *.MD
            - deploy:
                  name: Commit and push Docker image
                  command: |
                      sleep 5 && docker stop newimage
                      docker login ${DOCKER_ACCOUNT} -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
                      docker commit newimage ${DOCKER_ACCOUNT}/${PROJECT_NAME}:latest
                      docker tag ${DOCKER_ACCOUNT}/${PROJECT_NAME} "${DOCKER_ACCOUNT}/${PROJECT_NAME}:latest"
                      docker tag ${DOCKER_ACCOUNT}/${PROJECT_NAME} "${DOCKER_ACCOUNT}/${PROJECT_NAME}:${CIRCLE_BRANCH}"
                      docker tag ${DOCKER_ACCOUNT}/${PROJECT_NAME} "${DOCKER_ACCOUNT}/${PROJECT_NAME}:${CIRCLE_SHA1:0:8}"
                      docker push "${DOCKER_ACCOUNT}/${PROJECT_NAME}"

    deploy_staging:
        machine: true
        steps:
            - run:
                  name: Send deployment webhook to Rancher
                  command: |
                      BODY='{"push_data":{"tag":"'"${CIRCLE_BRANCH}"'"},"repository":{"repo_name":"'"${DOCKER_ACCOUNT}/${PROJECT_NAME}"'"}}'
                      curl -X POST ${RANCHER_STG_DEPLOY_URL} -H 'Content-Type: application/json' -d "${BODY}"

workflows:
    version: 2
    build_publish_deploy:
        jobs:
            - build
            - publish:
                  context: acceptance
                  requires:
                      - build
                  filters:
                      branches:
                          only:
                              - test
                              - stg
                              - develop
                              - master
            - deploy_staging:
                  context: acceptance
                  requires:
                      - publish
                  filters:
                      branches:
                          only:
                              - test
                              - stg
                              - develop
                              - master
